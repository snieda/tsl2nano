<?xml version="1.0" encoding="UTF-8"?>
<!--
	1. creates and starts a (hsqldb) database through a given user/password and sql-ddl file
	2. calls reverse-eng.xml to generate java entity beans, compiling and packing them into a jar file
-->
<project name="model driven generator" default="do.all" basedir=".">
	<property file="mda.properties" />
	<property file="jdbc-connection.properties"/>

	<target name="help" description="help overview">
		<echo message="please use one of these targets: do.all"/>
	</target>

	<path id="stdpath">
		<fileset dir="${basedir}">
			<include name="**"/>
		</fileset>
	</path>
	<path id="classpath">
		<fileset dir="${basedir}">
			<include name="**/*.jar"/>
			<include name="generated-bin/**/*.class"/>
		</fileset>
	</path>

	<!-- creates a user/schema, drops and creates tables -->
	<target name="create.database">
		<echo>
**********************************************************
creating database: ${jdbc.url}
	script-set   : ${jdbc.database}
	user         : ${jdbc.username}
**********************************************************
		</echo>
		
		<echo file="createuser.sql">
CREATE USER ${jdbc.username} PASSWORD '${jdbc.password}';
GRANT DBA to ${jdbc.username};
commit;
CREATE SCHEMA ${jdbc.scheme} AUTHORIZATION DBA;
SET SCHEMA ${jdbc.scheme};
commit;
		</echo>
		
		<echo message="creating user..." />
		<ant antfile="shell.xml" target="sh.sql">
			<property name="sh.sql.include" value="createuser.sql"/>
			<property name="sh.sql.onerror" value="continue"/>
		</ant>
		<echo message="cleaning database..." />
		<ant antfile="shell.xml" target="sh.sql">
			<property name="sh.sql.include" value="*drop*${jdbc.database}*.sql"/>
			<property name="sh.sql.onerror" value="continue"/>
		</ant>
		<echo message="creating database..." />
		<ant antfile="shell.xml" target="sh.sql">
			<property name="sh.sql.include" value="*${jdbc.database}*.sql"/>
			<property name="sh.sql.exclude" value="*drop*.sql"/>
			<property name="sh.sql.exclude2" value="*init*.sql"/>
			<property name="sh.sql.exclude3" value="createuser.sql"/>
		</ant>

		<echo message="filling data..." />
		<ant antfile="shell.xml" target="sh.sql">
			<property name="sh.sql.include" value="*init*${jdbc.database}*.sql"/>
		</ant>
	</target>
	
	<target name="do.all" description="creates database from ddl and entity beans from jdbc-connection">

		<!-- on windows we start the hsqldb in a new shell - as background process -->
		<condition property="start" value="start" else="">
			<!-- <equals casesensitive="false" arg1="${env.os.name}" arg2="windows" /> -->
			<contains string="${os.name}" substring="windows" casesensitive="false"/>
		</condition>
		<!-- on linux we need to start hsqldb in a background process -->
		<condition property="background" value="" else="&amp;">
			<contains string="${os.name}" substring="windows" casesensitive="false"/>
		</condition>
		<condition property="cmdargs" value="%*" else="$* ${background}">
			<contains string="${os.name}" substring="windows" casesensitive="false"/>
		</condition>
		<!-- on windows we can't constrain with a real filter -->
		<condition property="cp" value="*" else="hsqldb*.jar">
			<contains string="${os.name}" substring="windows" casesensitive="false"/>
		</condition>
		<echo file="runServer.bat">
java -cp ${cp} org.hsqldb.Server -database ${jdbc.database} -port ${jdbc.port} -silent false -trace true ${cmdargs}
		</echo>
		<chmod perm="+x" file="runServer.bat" />
	<!-- start the database with name ${basedir} -->
	
		<parallel failonany="true">
			<!-- first, start the database server and wait... -->
			<ant antfile="shell.xml" target="sh.exec.cmd">
				<property name="sh.exec.cmd.dir" value="${basedir}"/>
				<property name="sh.exec.cmd.arg1" value="${start}"/>
				<property name="sh.exec.cmd.arg2" value="runServer.bat"/>
				<property name="sh.exec.cmd.arg3" value="${background}"/>
			</ant>
			<sequential>
				<property name="sh.sleep.milliseconds" value="3000" />
				<ant antfile="shell.xml" target="sh.sleep"/>
				
				<!-- create the database -->
				<antcall target="create.database"/>
				
				<!-- create the beans jar file -->
				<ant antfile="reverse-eng.xml" />
				
				<!-- start the nano-h5 application if not started from there. -->
				<condition property="sh.disable.exec.cmd" value="true">
					<istrue value="${nano.h5.running}"/>
				</condition>
				<ant antfile="shell.xml" target="sh.exec.cmd">
					<property name="sh.exec.cmd.dir" value="${basedir}/.."/>
					<property name="sh.exec.cmd.arg1" value="${start}"/>
					<property name="sh.exec.cmd.arg2" value="run.bat"/>
					<property name="sh.exec.cmd.arg3" value="${basedir}"/>
					<property name="sh.exec.cmd.arg4" value="${background}"/>
				</ant>
				<fail message="mda generation task successful finished!"/>
			</sequential>
		</parallel>
		<echo message="mda generation finished!"/>
	</target>

</project>	