*FullRelation H5*
<font size="-1">Autor: Thomas Schneider 2012</font>

{toc}

h2. Introduction

generic html5 gui implementation providing a model driven access (MDA), bound to tsl2.nano.common bean-package and tsl2.nano.serviceaccess and it's GenericService using the javax.persistence. It is possible to design a class or database model, exporting it and to start a build process resulting in a complete html application, providing a comfortable way to edit all entities and their relations.

*Goals:* 
* pure model implementation + plattform independency (works on android, too).
* really small, having as less as possible static dependencies to other libraries
* everything has a default - all defaults are configurable
* full configurable (including standard bean behaviour and all entity behaviours)
* implementation through simple java beans + optional bean presenters
* navigates through given beans, showing bean-lists and bean-detail dialogs.
* prefills formatting, validation and presentation of relations
* pure html-5 (no javascript)
* independent of a special o/r mapper. all o/r mappers supporting javax.persistence with an EntityManager are usable.
* data replication to work offline (not finished yet!)
* full key-navigation (shortcuts)
* interfaces: 
** ddl-->beans through hibernate-tools
** jpa-->bean through annotation evaluation
** xsd-->bean (not finished yet!)
** java-interface-->java-bean (mock through internal proxy, not finished yet!)

Using the NanoHTTPD Server as base, this client application creates html surfaces, sending them through the integrated server to a html browser. Entry point is the file _application.html_ defining the browser request _http://localhost:8067_.

It is not a real web-application platform but a simple way to use html5 as graphical user interface - in a standard client application.

The data access is done by:
* tsl2nano.serviceaccess
* tsl2nano.directaccess

It is possible to use a ejb container in an application server, but the default is set to use jpa directly on the client (using _tsl2nano.directaccess_).
h3. Third Party Libraries

* "Jing-Trang xml2xsd-Generator":https://code.google.com/p/jing-trang/downloads/list
* "SimpleXML xml serializer":http://simple.sourceforge.net/download/stream/doc/tutorial/tutorial.php

h2. Starting / Test

The tsl2.nano.h5 framework can be started through it's jar _tsl2.nano.h5-xxxxx.jar. A start script _start.bat_ is available to do this in windows. Starting it, a given directory is used as a kind of workspace where you put all configuration and jar files into to be used. This jars may be ant, an o/r-mapper like hibernate with all dependencies. The configuration files are the environment.xml and all xml files describing the presentation of each entity bean.  Icons for all buttons and backgrounds are in the _icon_ folder. The main jar file can contain all dependent jar files (as described in the manifest file) or outside in the same directory as the main jar.

A possible start configuratin would be:

* nano.h5 main directory with:
** tsl2.nano.h5-xxxx.jar containing all dependent jars as described in _Dependencies_
** tsl.nano.common-xxxx.jar providing bootstrap loading with special classloaders
** environment directory like the sample _h5.sample_

h3. Dependencies

h4. Static Dependencies (direct referenced by tsl2.nano)

* simple-xml-2.7.jar

h4. Dynamic Dependencies (used by tsl2.nano, but through compatibility-layer)

* velocity-1.6-dep.jar 
* junit-4.8.2.jar 
* ant-launcher.jar 
* ant.jar 
* ant-nodeps.jar 
* javassist-3.12.0.GA.jar

h4. No Dependencies, but useful to do the work

* jdbc database driver (like hsqldb.jar)
* jpa o/r mapper (like hibernate, toplink or ormlite)
* generator tool to create entity beans (like hibernate-tools)

Hibernate 4 for example would have the following dependencies:

* commons-collections-3.2.1.jar 
* commons-logging-1.1.1.jar 
* commons-beanutils-1.8.0.jar 
* commons-io-1.3.2.jar 
* commons-lang-2.4.jar 
* commons-codec-1.6.jar 
* dom4j-1.6.1.jar 
* javassist-3.12.0.GA.jar
* antlr.jar
 
h3. A Sample Environment: h5.sample

A sample environment is h5.sample, containing all icons, jars and configurations for a project. It may be used for other nano.h5 projects. It uses:

* ant libraries to generate entitiy beans through hibernate-tools and the sample database
* hibernate with all dependencies as o/r mapper
* hibernate-tools
* hsqldb.jar as jdbc driver for a hsqldb database
* sample databae _timedb_
* sample icons for all buttons

Before you start nano.h5, you should start the sample hsqldb database:

h5.sample/runServer.bat

!doc/h5.sample.database.jpg!

To start nano.h5 you have call it with following syntax:

java -jar de.nano.h5.Loader [environment-path (default: config] [http-server-port (default: 8067)]

If you start it on windows, a browser will be opened to show the initial screen:

!doc/h5.sample.start.jpg!

Now you can login to the sample database. It is full configurable, which o/r mapper and database should be used. After pressing Ok, a persistence.xml will be generated to be found by the javax.persistence implementation.

!doc/h5.sample.persistence.jpg!

All entities of the jar containing the entities will be listed. You can filter the list and select one or more to edit them. 

!doc/h5.sample.entity-types.jpg!

Then you will get a search page with a search filter and an empty list. Pushing the search-button will create the result list.

!doc/h5.sample.entity-search.jpg!

If you click a column header, the list will be sorted by this column - clicking to that column a second time, the sorting will be done in the other direction. The possible actions will be described in the next chapter.

h3. Extending the Sample

The file _h5.sample/environment.xml_ defines the application behaviour. For further informations read chapter _The Environment_.
It is possible to change the presentation of each bean. Inside the directory _h5.sample/beandef_ all beans have configuration files to change their presentation and behaviour.

h2. The Environment


h2. Application and Page Actions

h2. Model Driven Architecture (MDA)

Creating an UML-Diagram with perhaps _ArgoUML_, or creating an ER-Diagram with f.e. _architect_ you may generate a ddl script. Nano.H5 provides an ant-script (_mda.xml_) to generate a hsqldb-database and generating entity beans through hibernate-tools for the given jdbc-connection.

h2. Developing and Deploying

* "Code Server":https://sourceforge.net/p/tsl2nano/code/ci/master/tree/tsl2.nano.common

If you change sources of this plugin, you should start ant script _eclipse-tsl2.nano.h5.xml_ with target _tsl2nano.eclipse.h5.export_ and after that the 'deploy' target of your main project.

Normally, you don't have to create html-pages by yourself, but if you are interested in html5, have a look at the following tutorials/references:
* "W3C-Html5-Reference":http://www.w3.org/TR/2013/NOTE-html-markup-20130528/Overview.html
* "Html-5.com":http://www.html-5.com/index.html
* "Webkompetenz":http://webkompetenz.wikidot.com/docs:html-handbuch
* "Html5 Poster":http://www.xhtml-lab.com

h3. jar-library dependencies

* velocity-1.6-dep.jar: XmlUtil.transform (using CompatibilityLayer)
* TODO: describe all jars!

h2. Changelog

| Version | Date | Description |
| 0.0.1 | 06.07.2013 | First alpha Version

h2. TODOs

* (v) BeanCollector.createItem() --> replace common BeanUtils call to be able to run on android
* (v) main arguments: bean-jar, jdbc-url, user, passwd
* (v) Show count of items
* (v) Navigation Links have Problems
* (v) show logging
* (v) visible icons read by page
* (v) Button-Panel for
* (v) Use Xml-Configuration for BeanDefinitions
** (v) Print
** (v) Export
** (v) select all
** (v) deselect all
* (v) Use Environment
* (v) *Extend BeanContainer:*
** (-) new action: 'getValueBetween()'
** (v) extend all finders with start index (see maxresult) to have a result range
** (v) beancollector with next() and previous() data (using 'start' index and 'maxresult')
* (x) Application Menu: reset (--> caches, environment, navigation), restart, login, logout
* (x) default attribute names without @id field
* (x) Nesting Beans
* (x) Bean with Layout
* Right-Alignments for Numbers
* Problem on NanoHttp canceling button panel (sometimes)
* Check for single selection
* Check navigation (check input on button action like 'open' without selecting an item.
* Styling (Collector, Details)
* Show Progress-Page (using Statistics)
* *Html-Table:*
** (v) Sorting-Header
** (v) Previous, Next
** Style (of sorting header etc.)
** up, down (for sorting values)
* (v) If search result is only one element, select it
* *Searches on big data:*
** first count data
** (v) button to show one-to-many in table
** use thread to be interupted
* (x) internal export and view (replacing ant-like variables and showing the document)
* generate const class from property file
* create xsd in through CommonTest with trang.jar
* (x) add configuration action (html-tool to edit xml files)
** ConfigBeanContainer to configure BeanDefinition for special beans
* *Nice-To-Have*
** eval validation annotations
** BeanPresenterHelper: test OptionsWrapper
** min-search-field + button ==> max-search-field visible. standard: filtering with astericks
* *Refactoring:*
** (v) RegularExpressionFormat ==> RegExpFormat
** refactore ScriptUtil: extract Ant calls
** util.bean ==> bean
** nano.h5 ==> fullrelation
** extract bean-package as project
** refactore environment property names to use logic path-algorithm
** (x) file-access: use Environment.getResource() reading through jar or file system
** extract api
* *Interfaces:*
** java-interface-jar filled with BeanProxy to be used as mocks
** reading xsd through dom - creating beandefinitions (as xml)
** BeanEnhancer enhancing Beans having only attributes with getters/setters
* *Replication / Offline*
** FileBeanContainer serializing all lists of all BeanCollectors
** GenericBeanContainer using filled FileBeanContainer re-attaching all serialized bean lists
* Validate against Html5-xsd in debug mode
* include LogicTable?
* check starting application multiple times
* (x) on multiple selection, put all selected elements to the stack
* *Problem: creating a new element, copying an existing one, one-to-many connections will be lost*
** depends on the datamodel: gruppe --> grupperolle(only for specific gruppe) --> rolle
*** The new item has to be put to the list of it's parent container. This list has to be saved before the new item!
*** The beancollector now holds a 
* *Problem: Filtering on Entities doesn't work (findBetween is not able to do a between for 'entity-columns')*
* *Problem: Filtering BeanCollectors of Entities doesn't work after sorting twice*
* internationalization: english RegExpFormat, messages.properties
* remove config path from environment (-->transient)
* dynamic jar-loading inside used standard jars does not work without static entry in manifest
* *hibernate-tools*:
** configure to have generated IDs
** read documentation
* *Argo-UML 0.34*
** how to create ddl from model
* *PowerDesigner*
** create ant-script:
*** sql-statements with ddl
*** hibtool hbm2java
*** replace jdbc-connection-properties
*** start nano.h5
*** jmeter integration test
* *Dependencies*
** (v) Log and LogFactory
** (v) DefaultFormat: StandardToStringStyle and ToStringBuilder
** StringUtil --> BeanUtil
** (v) BeanClass --> StringUtil --> CollectionUtil --> DefaultFormat
* multiple type/format evaluation in BeanValue (new member for type?) Presentable and BeanPresentationHelper