*tsl2.nano.common*
<font size="-1">Autor: Thomas Schneider 2009-2013</font>

{toc}

h1. Introduction

A base plugin for all tsl2nano plugins to hold common libraries and code. There are no dependencies to eclipse and swt plugins to be usable on server side.

h2. Features

* Resource bundling with "Messages":src/main/de.tsl2.nano/Messages.java
* Different Implementations of "IAction":src/main/de.tsl2.nano/action/IAction.java to be used by GUI-Buttons
* Exception-handling through "FormattedException":src/main/de.tsl2.nano/exception/FormattedException.java and "ForwardedException":src/main/de.tsl2.nano/exception/ForwardedException.java
* Historizing of Text-Elements through "HistorizedInputFactory":src/main/de.tsl2.nano/historize/HistorizedInputFactory.java
* Bean-Implementations for generalization - different to apache-implementations - see "BeanAttribute":src/main/de.tsl2.nano/util/bean/BeanAttribute.java
* "ClassGenerator":src/main/de.tsl2.nano/util/codegen/ClassGenerator.java to generate bean presenter base or const classes (using Velocity).
* A lot of Utility-Classes for scripting, file-access, string-access, dates, caches, class-loading, formatting etc.
* includes base libraries like 'apache-commons* and starts *ant-scripts*, *beanshell*, *tslbase*, *velocity* scripts.
* numbers with unit implementations. extended currency implementation, respecting historized currencies.
* bean based byte code enhancing trough *javassist*
* base generic implemenation for event/messaging
* dynamic proxy implemenations
* performance optimized collections (segmented lists)
* object formatting and parsing utlities
* enhanced classloaders
* enhanced runner definitions

h2. ToDos

* rename project to be independent of tsl2nano
* refactoring: move *bean* package out of *util*
* refactore a new *cache* package

h2. Deployment

If you change sources of this plugin, you should start the following ant scripts: 
* _eclipse-tsl2.nano.common.xml_ with target _tsl2nano.eclipse.common.export_ (Please be sure to use the same jre-runtime as your eclipse-workspace - otherwise nothing will be done!).
* the 'deploy' target of your main project.

